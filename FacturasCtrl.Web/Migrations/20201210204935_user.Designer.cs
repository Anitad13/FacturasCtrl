// <auto-generated />
using System;
using FacturasCtrl.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FacturasCtrl.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201210204935_user")]
    partial class user
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bancodfid");

                    b.Property<string>("Bannombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Benefgt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BancoId");

                    b.Property<string>("Bgtbenef")
                        .IsRequired();

                    b.Property<string>("Bgtccnit")
                        .IsRequired();

                    b.Property<string>("Bgtformap")
                        .IsRequired();

                    b.Property<string>("Bgtnumc")
                        .IsRequired();

                    b.Property<double>("Bgtvalor");

                    b.Property<int>("FacturaId");

                    b.Property<int>("SucursalId");

                    b.Property<int>("TipoctaId");

                    b.Property<int>("TipodocumId");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoctaId");

                    b.HasIndex("TipodocumId");

                    b.ToTable("Benefgts");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ciunombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Ciudads");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.CodigoPresupuestal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codconcepto")
                        .IsRequired();

                    b.Property<string>("Codnivel");

                    b.Property<string>("Codnumeral")
                        .IsRequired();

                    b.Property<bool>("Codver");

                    b.HasKey("Id");

                    b.ToTable("CodigoPresupuestals");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Ctasxprov", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BancoId");

                    b.Property<string>("Cxpnum")
                        .IsRequired();

                    b.Property<int>("ProveedorId");

                    b.Property<int>("SucursalId");

                    b.Property<int>("TipoctaId");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoctaId");

                    b.ToTable("Ctasxprovs");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Dfactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigopresupuestalId");

                    b.Property<string>("FacturaId")
                        .IsRequired();

                    b.Property<int?>("FacturasId");

                    b.Property<int>("ProyectoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("CodigopresupuestalId");

                    b.HasIndex("FacturasId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Dfacturas");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Dtosxfac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Concepto")
                        .IsRequired();

                    b.Property<int>("FacturaId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.ToTable("Dtosxfacs");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Concepto")
                        .IsRequired();

                    b.Property<string>("CuentaOrigen");

                    b.Property<string>("DocumentoAnexo");

                    b.Property<bool>("Facanticipo");

                    b.Property<bool>("Facimpto");

                    b.Property<bool>("Facnomina");

                    b.Property<string>("Facpago");

                    b.Property<string>("Facperrecib");

                    b.Property<int>("Facplanilla");

                    b.Property<string>("Facsucursal");

                    b.Property<double>("Facvalsiniva");

                    b.Property<DateTime>("FechaPago");

                    b.Property<DateTime>("FechaRecibido");

                    b.Property<DateTime>("FechadePago");

                    b.Property<string>("InstruccionesEspeciales");

                    b.Property<int>("InstruccionesPagoId");

                    b.Property<string>("NoFactura")
                        .IsRequired();

                    b.Property<string>("ObservacionesDF");

                    b.Property<string>("ObservacionesDTA");

                    b.Property<int>("PrioridadId");

                    b.Property<int>("ProveedorId");

                    b.Property<double>("ValorDocumento");

                    b.HasKey("Id");

                    b.HasIndex("PrioridadId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.InstruccionesPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigofidu");

                    b.Property<string>("Concepto")
                        .IsRequired();

                    b.Property<int?>("FacturasId");

                    b.HasKey("Id");

                    b.HasIndex("FacturasId");

                    b.ToTable("InstruccionesPagos");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.MyPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MyPersonals");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Prioridad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Prioridads");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiudadId");

                    b.Property<int?>("FacturasId");

                    b.Property<bool>("Proauto");

                    b.Property<int>("Proclase");

                    b.Property<string>("Procontac");

                    b.Property<string>("Prodirec")
                        .IsRequired();

                    b.Property<int>("Proestad");

                    b.Property<int>("Profedia");

                    b.Property<int>("Profemes");

                    b.Property<bool>("Progran");

                    b.Property<int>("Proingre");

                    b.Property<string>("Promail");

                    b.Property<int>("Prondigv");

                    b.Property<string>("Pronombre")
                        .IsRequired();

                    b.Property<string>("Pronticel")
                        .IsRequired();

                    b.Property<bool>("Prorut");

                    b.Property<string>("Protel1")
                        .IsRequired();

                    b.Property<string>("Protel2");

                    b.Property<int>("Protipo");

                    b.Property<int>("TipoDocumId");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("FacturasId");

                    b.HasIndex("TipoDocumId");

                    b.ToTable("Proveedors");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Proinicial");

                    b.Property<string>("Pronombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Succodfid");

                    b.Property<string>("Sucnombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sucursals");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Tipocta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipcodfidu");

                    b.Property<string>("Tipnombre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tipoctas");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Tipodocum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tdcodfid");

                    b.Property<string>("Tdtipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tipodocums");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Benefgt", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Banco", "Bancos")
                        .WithMany("Benefgts")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Factura", "Facturas")
                        .WithMany("Benefgts")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Sucursal", "Sucursals")
                        .WithMany("Benefgts")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Tipocta", "Tipoctas")
                        .WithMany("benefgts")
                        .HasForeignKey("TipoctaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Tipodocum", "Tipodocums")
                        .WithMany("Benefgts")
                        .HasForeignKey("TipodocumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Ctasxprov", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Banco", "Bancos")
                        .WithMany("Ctasxprovs")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Sucursal", "Sucursals")
                        .WithMany("Ctasxprovs")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Tipocta", "Tipoctas")
                        .WithMany("Ctasxprovs")
                        .HasForeignKey("TipoctaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Dfactura", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.CodigoPresupuestal", "CodigoPresupuestals")
                        .WithMany("Dfacturas")
                        .HasForeignKey("CodigopresupuestalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Factura", "Facturas")
                        .WithMany("Dfacturas")
                        .HasForeignKey("FacturasId");

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Proyecto", "Proyectos")
                        .WithMany("Dfacturas")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Dtosxfac", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Factura", "Facturas")
                        .WithMany("Dtosxfacs")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Factura", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Prioridad", "Prioridads")
                        .WithMany("Facturas")
                        .HasForeignKey("PrioridadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.InstruccionesPago", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Factura", "Facturas")
                        .WithMany("InstruccionesPagos")
                        .HasForeignKey("FacturasId");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Manager", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.MyPersonal", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FacturasCtrl.Web.Data.Entities.Proveedor", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.Ciudad", "Ciudads")
                        .WithMany("proveedors")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Factura", "Facturas")
                        .WithMany("Proveedors")
                        .HasForeignKey("FacturasId");

                    b.HasOne("FacturasCtrl.Web.Data.Entities.Tipodocum", "Tipodocums")
                        .WithMany("Proveedors")
                        .HasForeignKey("TipoDocumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FacturasCtrl.Web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FacturasCtrl.Web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
